Andiamo a simulare il lavoro che viene svolto dalla PKI, ovvero la public key infrastructure, che va a creare e gestire le chiavi pubbliche e private, insieme ai certificati per gli utenti reali. Per simulare al meglio il lavoro di una PKI realizziamo una cartella dove risiederanno tutti i file della CA, certification Autority.
Dopo aver realizzato la cartella essa dovrà contenere 2 sotto directory certs e private. Con il comando 
"chmod g-rwx,o-rwx private" andiamo a settare i permessi alla cartella private. 

Nella cartella CA andranno creati 3 file:

1.serial: usato per tenere traccia dell'ultimo numero di serie usato per il rilascio del certificato, una CA non può rilasciare due certificati aventi lo stesso serial;

2.certindex.txt: usato per memorizzare le informazioni sui certificati emessi dalla CA

3.crlnumber: usato per tenere traccia dei certificati revocati.

Eseguiamo i seguenti comandi:
echo '01'>serial
touch certindex.txt
echo '01'>crlnumber

Dobbiamo apportare delle modifiche al file openssl.cnf, che però sono state già apportate neil file in cartella.
Creiamo ora il certificato della CA:

openssl req -new -x509 -extensions v3_ca -keyout private/cakey.pem -out cacert.pem -days 365 -config ./openssl.cnf

Ci verrà richiesta una chiave, su di essa si basa tutta la sicurezza dell'intera CA, usamo la chiave "sicurezza"
Dopo aver inserito la chiave ci saranno alcuni campi da compilare.
Dopo aver compilato tutto verrà creato il file cacert.pem nella CA e il file cakey.pem nella private, per vedere il contenuto della cakey.pem basta digitare il comando:

openssl rsa -in private/cakey.pem -text

Verra mostrato a video lo stesso contenuto che otteniamo quando vediamo una chiave privata in rsa, ovvero:
RSA Private-Key: (2048 bit, 2 primes)
modulus:
    00:a0:03:1e:62:aa:3e:37:72:64:bd:26:68:2b:ba:
    37:3c:19:e5:43:0b:96:fc:6b:c8:12:04:52:4c:ee:
    67:9b:41:b2:db:31:c8:20:1f:82:6b:9d:3e:3a:9f:
    cc:99:b0:0f:d2:17:72:63:76:86:32:bd:bb:8d:a3:
    46:55:40:2a:19:d4:eb:c0:1c:2a:06:82:f0:bc:32:
    3f:94:2d:29:a2:9c:db:d6:26:c1:a5:3a:67:1b:21:
    68:53:48:cf:8a:fe:c1:25:66:9f:eb:ea:49:eb:5a:
    25:91:ac:e7:45:c3:57:9b:36:72:8d:57:4f:05:eb:
    80:d2:14:9f:37:0d:f6:27:f9:df:79:0b:9b:93:af:
    3d:de:7d:42:db:6c:eb:c8:cd:f1:97:ff:2a:3a:61:
    ef:19:6e:99:e3:85:61:9f:c2:43:cc:18:78:48:e9:
    48:1f:c6:a2:f8:c5:65:fc:66:76:59:c4:92:e7:3e:
    66:3d:ff:b6:b6:46:7b:9c:db:d2:68:82:33:55:dd:
    a3:94:97:0e:52:1f:a8:2c:b0:05:3f:b9:d2:ff:4a:
    39:9b:3c:3f:ca:3b:a1:0f:ac:ad:f0:cb:e0:1c:5d:
    f5:c6:18:4a:41:60:10:ec:7c:13:9b:5d:8b:a5:17:
    48:32:5b:17:f4:5b:e9:d2:d6:ac:1e:3d:18:d5:80:
    d6:3b
publicExponent: 65537 (0x10001)
privateExponent:
    54:f9:d3:05:2a:cb:e7:be:44:69:7f:20:0b:38:d5:
    64:81:8c:13:52:f0:58:15:15:27:1c:4c:68:b6:a3:
    26:fc:78:f3:97:38:64:76:d7:58:37:25:79:14:ac:
    1f:62:34:c4:a9:d7:01:a3:4c:19:5e:51:60:22:b9:
    93:44:84:17:3b:d0:07:31:ed:cf:8f:72:31:3f:ae:
    2c:0e:df:f1:8f:c3:df:b2:ad:5c:05:ec:03:a8:76:
    32:e4:93:f3:88:df:21:f1:a2:34:33:34:16:5c:c5:
    5e:db:a7:e6:90:9a:d1:be:d4:8e:e3:33:00:3d:d5:
    27:bb:f3:e1:d4:f4:48:bd:bf:4b:c3:27:fc:db:a0:
    85:ac:5c:3e:89:e9:df:04:8e:c8:50:5a:37:ad:29:
    79:36:55:41:f4:89:94:2a:b7:1c:1c:fa:c7:1f:c0:
    9b:ce:d8:c6:95:05:3f:11:16:fa:38:e5:86:5f:46:
    3c:d3:3d:f2:a1:11:ec:95:01:9a:30:f6:f4:27:19:
    fe:01:0d:df:6d:cc:02:a0:95:87:d5:58:fc:9a:83:
    e4:07:ff:0b:4b:3d:4a:ce:c2:e9:cb:47:0e:f3:6c:
    79:76:5c:ef:13:68:b5:5d:13:86:35:7c:a0:51:73:
    05:12:d9:b6:f8:d6:c5:02:04:bd:da:c6:4f:1a:07:
    21
prime1:
    00:cb:07:30:8f:0c:5b:6a:78:c1:ac:89:c1:84:23:
    3d:60:89:c1:d4:5a:79:e2:6c:d1:e5:9e:18:89:67:
    bf:c6:69:24:4a:32:10:3a:9b:78:96:98:58:33:71:
    37:9e:fb:00:47:40:8f:0a:5d:72:bb:2a:56:11:21:
    ae:89:0b:3a:d6:35:fa:9e:b8:f8:27:44:11:88:f0:
    c0:ad:6d:a7:52:c9:1d:b2:c4:2a:f1:1a:66:51:4b:
    68:17:e2:8f:c5:9c:18:7c:a9:8f:0e:3f:ce:e9:a5:
    3a:16:c3:89:1a:19:52:b8:1c:8f:0b:45:10:3c:1b:
    60:08:a4:2d:e3:83:4e:a8:dd
prime2:
    00:c9:c2:c6:fc:2b:81:27:9f:6c:31:59:e4:4d:c7:
    2d:13:f2:80:47:f5:36:64:3e:ed:be:4d:4c:0a:e8:
    55:42:49:5b:2a:34:6d:7c:ff:e9:09:e5:0c:1b:3d:
    ab:22:41:05:ac:3f:a4:c3:34:c6:55:bd:8d:3b:0a:
    78:2d:be:3c:07:25:41:81:a0:c8:ae:bc:e1:ef:36:
    e6:40:22:05:14:12:5f:02:d5:af:84:08:b3:35:10:
    e1:d5:65:9a:0a:98:ca:7e:66:a1:04:e3:68:33:21:
    33:bd:ad:f4:7e:18:89:4f:de:34:90:a8:73:71:b6:
    38:cf:6f:1e:36:56:48:7d:f7
exponent1:
    00:b6:1a:06:c5:e7:91:7f:18:3c:ae:a3:08:7d:9a:
    96:0c:a6:c2:c1:d3:3d:0b:88:0b:63:e6:bf:9f:4e:
    fd:45:db:3c:7f:88:13:e2:5d:5c:75:c6:c3:25:b0:
    e0:f0:a9:b5:80:33:39:99:54:63:f9:d8:69:46:08:
    6d:e1:e1:be:ae:2f:d0:50:d9:1b:4b:2c:d4:85:7d:
    5b:74:b2:ab:a7:a7:58:09:e5:c5:96:67:d5:6a:09:
    36:9e:65:ca:0a:b6:8d:88:13:15:8a:f4:54:84:60:
    7c:8f:ba:66:98:90:2a:0f:95:1e:00:3f:bb:e6:0d:
    af:bf:50:73:10:63:d0:03:c9
exponent2:
    00:a8:1d:74:50:8a:af:83:a4:83:32:5c:04:b0:0a:
    56:b5:58:4b:2b:aa:57:38:10:77:69:2a:5f:42:77:
    75:13:56:ac:6f:ee:5f:8c:d8:70:05:9e:a5:07:cd:
    ca:db:2f:f2:da:23:ed:d5:fa:13:89:3d:f8:80:49:
    a8:f9:f4:99:70:1a:cb:0a:88:3e:af:db:13:27:90:
    47:2b:09:2d:d2:1b:bc:af:4f:fe:7f:b6:00:1d:27:
    84:05:9c:33:4e:c1:21:79:51:6a:b9:f8:02:cb:17:
    cf:55:2d:ad:9b:a4:36:46:26:91:06:38:56:79:59:
    ac:dc:ab:6a:31:3c:94:0a:e1
coefficient:
    6b:01:e3:8d:51:ec:ff:25:c9:ca:3c:36:32:60:2b:
    71:17:96:d5:21:53:3a:be:bd:60:9e:d8:8f:e8:d4:
    da:89:b0:b2:ba:0f:d8:52:4c:e2:a1:ff:06:77:cb:
    09:94:2d:85:f4:10:46:07:53:fb:92:9f:85:39:16:
    a5:43:b6:45:02:ed:b2:cb:fe:49:94:66:1e:0a:28:
    48:82:bd:44:11:80:b7:55:89:b5:f8:5b:7f:00:93:
    10:6c:85:b8:c4:e3:3a:e5:bf:fa:83:61:ed:84:1a:
    aa:0b:80:eb:34:5e:c8:06:99:20:b6:46:f6:68:16:
    c4:14:f6:4d:ce:06:48:8c
writing RSA key
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAoAMeYqo+N3JkvSZoK7o3PBnlQwuW/GvIEgRSTO5nm0Gy2zHI
IB+Ca50+Op/MmbAP0hdyY3aGMr27jaNGVUAqGdTrwBwqBoLwvDI/lC0popzb1ibB
pTpnGyFoU0jPiv7BJWaf6+pJ61olkaznRcNXmzZyjVdPBeuA0hSfNw32J/nfeQub
k6893n1C22zryM3xl/8qOmHvGW6Z44Vhn8JDzBh4SOlIH8ai+MVl/GZ2WcSS5z5m
Pf+2tkZ7nNvSaIIzVd2jlJcOUh+oLLAFP7nS/0o5mzw/yjuhD6yt8MvgHF31xhhK
QWAQ7HwTm12LpRdIMlsX9Fvp0tasHj0Y1YDWOwIDAQABAoIBAFT50wUqy+e+RGl/
IAs41WSBjBNS8FgVFSccTGi2oyb8ePOXOGR211g3JXkUrB9iNMSp1wGjTBleUWAi
uZNEhBc70Acx7c+PcjE/riwO3/GPw9+yrVwF7AOodjLkk/OI3yHxojQzNBZcxV7b
p+aQmtG+1I7jMwA91Se78+HU9Ei9v0vDJ/zboIWsXD6J6d8EjshQWjetKXk2VUH0
iZQqtxwc+scfwJvO2MaVBT8RFvo45YZfRjzTPfKhEeyVAZow9vQnGf4BDd9tzAKg
lYfVWPyag+QH/wtLPUrOwunLRw7zbHl2XO8TaLVdE4Y1fKBRcwUS2bb41sUCBL3a
xk8aByECgYEAywcwjwxbanjBrInBhCM9YInB1Fp54mzR5Z4YiWe/xmkkSjIQOpt4
lphYM3E3nvsAR0CPCl1yuypWESGuiQs61jX6nrj4J0QRiPDArW2nUskdssQq8Rpm
UUtoF+KPxZwYfKmPDj/O6aU6FsOJGhlSuByPC0UQPBtgCKQt44NOqN0CgYEAycLG
/CuBJ59sMVnkTcctE/KAR/U2ZD7tvk1MCuhVQklbKjRtfP/pCeUMGz2rIkEFrD+k
wzTGVb2NOwp4Lb48ByVBgaDIrrzh7zbmQCIFFBJfAtWvhAizNRDh1WWaCpjKfmah
BONoMyEzva30fhiJT940kKhzcbY4z28eNlZIffcCgYEAthoGxeeRfxg8rqMIfZqW
DKbCwdM9C4gLY+a/n079Rds8f4gT4l1cdcbDJbDg8Km1gDM5mVRj+dhpRght4eG+
ri/QUNkbSyzUhX1bdLKrp6dYCeXFlmfVagk2nmXKCraNiBMVivRUhGB8j7pmmJAq
D5UeAD+75g2vv1BzEGPQA8kCgYEAqB10UIqvg6SDMlwEsApWtVhLK6pXOBB3aSpf
Qnd1E1asb+5fjNhwBZ6lB83K2y/y2iPt1foTiT34gEmo+fSZcBrLCog+r9sTJ5BH
Kwkt0hu8r0/+f7YAHSeEBZwzTsEheVFqufgCyxfPVS2tm6Q2RiaRBjhWeVms3Ktq
MTyUCuECgYBrAeONUez/JcnKPDYyYCtxF5bVIVM6vr1gntiP6NTaibCyug/YUkzi
of8Gd8sJlC2F9BBGB1P7kp+FORalQ7ZFAu2yy/5JlGYeCihIgr1EEYC3VYm1+Ft/
AJMQbIW4xOM65b/6g2HthBqqC4DrNF7IBpkgtkb2aBbEFPZNzgZIjA==
-----END RSA PRIVATE KEY-----

Mediante il seguente comando possiamo vedere invece il contenuto del certificato:

openssl x509 -in cacert.pem -text -noout

ed otteniamo informazioni sul certificato:
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            50:0a:ef:b9:25:47:d8:52:01:46:1e:01:70:8c:d1:52:44:a5:4a:12
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = IT, ST = Caserta, L = Calvi Risorta, O = Internet Widgits Pty Ltd
        Validity
            Not Before: Jun 12 16:56:26 2022 GMT
            Not After : Jun 12 16:56:26 2023 GMT
        Subject: C = IT, ST = Caserta, L = Calvi Risorta, O = Internet Widgits Pty Ltd
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:a0:03:1e:62:aa:3e:37:72:64:bd:26:68:2b:ba:
                    37:3c:19:e5:43:0b:96:fc:6b:c8:12:04:52:4c:ee:
                    67:9b:41:b2:db:31:c8:20:1f:82:6b:9d:3e:3a:9f:
                    cc:99:b0:0f:d2:17:72:63:76:86:32:bd:bb:8d:a3:
                    46:55:40:2a:19:d4:eb:c0:1c:2a:06:82:f0:bc:32:
                    3f:94:2d:29:a2:9c:db:d6:26:c1:a5:3a:67:1b:21:
                    68:53:48:cf:8a:fe:c1:25:66:9f:eb:ea:49:eb:5a:
                    25:91:ac:e7:45:c3:57:9b:36:72:8d:57:4f:05:eb:
                    80:d2:14:9f:37:0d:f6:27:f9:df:79:0b:9b:93:af:
                    3d:de:7d:42:db:6c:eb:c8:cd:f1:97:ff:2a:3a:61:
                    ef:19:6e:99:e3:85:61:9f:c2:43:cc:18:78:48:e9:
                    48:1f:c6:a2:f8:c5:65:fc:66:76:59:c4:92:e7:3e:
                    66:3d:ff:b6:b6:46:7b:9c:db:d2:68:82:33:55:dd:
                    a3:94:97:0e:52:1f:a8:2c:b0:05:3f:b9:d2:ff:4a:
                    39:9b:3c:3f:ca:3b:a1:0f:ac:ad:f0:cb:e0:1c:5d:
                    f5:c6:18:4a:41:60:10:ec:7c:13:9b:5d:8b:a5:17:
                    48:32:5b:17:f4:5b:e9:d2:d6:ac:1e:3d:18:d5:80:
                    d6:3b
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                93:4D:51:06:75:4A:0B:0F:71:24:99:EF:1B:3B:8C:15:23:EB:77:5F
            X509v3 Authority Key Identifier: 
                keyid:93:4D:51:06:75:4A:0B:0F:71:24:99:EF:1B:3B:8C:15:23:EB:77:5F

            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha256WithRSAEncryption
         1d:36:9f:f0:3e:08:6a:7b:47:fc:ef:0c:5e:d9:0c:e7:0f:2b:
         c1:85:e9:0a:b3:ae:55:de:d7:d8:31:86:58:64:e0:d0:6a:20:
         f0:32:89:10:d7:79:da:6e:07:4a:87:66:91:ed:62:b5:9e:dc:
         63:4a:0f:46:57:9a:47:8d:ee:39:da:70:93:17:89:a7:8e:06:
         50:55:6c:9d:77:bf:ef:7f:0f:f3:c6:b2:26:78:47:f9:af:14:
         e8:6a:32:d3:af:08:dc:fe:5b:8d:12:f8:01:65:ed:46:3f:8d:
         e2:59:99:f9:d6:95:02:5d:95:3e:a7:2d:13:48:50:30:85:2d:
         b3:1d:56:c0:4c:fa:43:73:80:34:6c:0f:86:24:63:6d:7a:3b:
         bf:a5:b5:ed:d5:9e:b3:cc:b1:96:8b:22:02:b7:3b:e5:92:3e:
         5b:be:7f:9a:b8:56:c2:40:84:42:89:67:d6:ac:0b:01:e6:be:
         51:10:55:aa:8f:12:79:02:27:01:6a:df:75:17:26:da:d2:c6:
         74:74:88:3c:73:42:a9:5c:8c:86:48:b5:5b:42:23:cb:d0:7e:
         ef:ba:32:5d:96:99:37:80:4b:bc:34:20:ba:19:e5:2c:25:a3:
         51:61:5c:be:d3:26:8b:19:37:a2:fe:4e:95:b7:8f:3b:d5:8a:
         21:41:d9:19
------------------------------------------------------------------------------------------------------------------
Simuliamo adesso una richiesta di certificato effettuata da un utente alla PKI

simuliamo la richiesta dell'utente attraverso il comando:

openssl req -new -out utente1-req.pem -keyout private/utente1-key.pem -days 365 -config ./openssl.cnf

ci chiederà una password che verrà usata per cifrare la chaive, noi useremo "sicurezzautente"; il comando realizzerà un file utente1-req.pem che contiene la richiesta del certificato e un ulteriore file nella cartella private utente1-key.pem contenente le chiavi associate alla richiesta di certificato.
------------------------------------------------------------------------------------------------------------------
Dopo aver ricevuto la rischiesta la PKI deve realizzare per l'utente il certificato, simuliamo questa operazione.

Useremo il comando ca messo a disposizione da OpenSSL per svolgere le principali manzioni svolte da una CA.
L'utente invia alla CA il file contenete la richiesta di certificato, in questo caso utente1-req.pem, la CA dopo aver ricevuto la richiesta genere il certificato per l'utente attraverso il seguente comando:

openssl ca -out utente1-cert.pem -config ./openssl.cnf -in utente1-req.pem

Se il comando va a buon fine viene aggiunta una nuova entry nel file certindex.txt, Viene incrementato il numero di serie nel file serial,Vengono generati due nuovi file 
1.utente1-cert.pem Certificato che dovrà essere inviato all’utente
2.Copia di tale certificato, che sarà automaticamente memorizzata
nella directory certs della CA Il nome di tale file è dato dal suo numero seriale seguito dall’estensione .pem (ad es., 01.pem)

---------------+++++++++++++++++++++++++++++++++----------------------------------+++++++++++++++++++++++++++-----
(DATO CHE SONO STATO 3 GIORNI  PER CAPIRE COME FAR PARTIRE L'ULTIMO COMANDO HO CAPITO CHE LE DESCRIZIONI DEVONO COINCIDERE QUINDI RILASCIO TUTTO IL CMD DI LINUX!)

──(fatted74㉿Fatted)-[~/Scrivania/CA]
└─$ openssl req -new -x509 -extensions v3_ca -keyout private/cakey.pem -out cacert.pem -days 365 -config ./openssl.cnf
Generating a RSA private key
.................................+++++
......+++++
writing new private key to 'private/cakey.pem'
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:IT
State or Province Name (full name) [Some-State]:Caserta
Locality Name (eg, city) []:Calvi Risorta
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Fatted
Organizational Unit Name (eg, section) []:Fatted
Common Name (e.g. server FQDN or YOUR name) []:Antonio
Email Address []:fattedcube74@gmail.com
                                                                                                                   
┌──(fatted74㉿Fatted)-[~/Scrivania/CA]
└─$ openssl req -new -out utente1-req.pem -keyout private/utente1-key.pem -days 365 -config ./openssl.cnf
Ignoring -days; not generating a certificate
Generating a RSA private key
........................+++++
.+++++
writing new private key to 'private/utente1-key.pem'
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:IT
State or Province Name (full name) [Some-State]:Caserta
Locality Name (eg, city) []:Calvi Risorta
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Fatted
Organizational Unit Name (eg, section) []:Fatted
Common Name (e.g. server FQDN or YOUR name) []:Antonio
Email Address []:fattedcube74@gmail.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:sicurezzautente
An optional company name []:
                                                                                                                   
┌──(fatted74㉿Fatted)-[~/Scrivania/CA]
└─$ openssl ca -out utente1-cert.pem -config ./openssl.cnf -in utente1-req.pem
Using configuration from ./openssl.cnf
Enter pass phrase for .//private/cakey.pem:
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Jun 12 17:54:00 2022 GMT
            Not After : Jun 12 17:54:00 2023 GMT
        Subject:
            countryName               = IT
            stateOrProvinceName       = Caserta
            organizationName          = Fatted
            organizationalUnitName    = Fatted
            commonName                = Antonio
            emailAddress              = fattedcube74@gmail.com
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Comment: 
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier: 
                7D:9B:B7:04:C4:84:08:47:EF:81:AD:71:14:35:C1:A3:64:F3:77:C9
            X509v3 Authority Key Identifier: 
                keyid:F9:5B:F9:F8:18:78:14:DF:BE:E1:92:73:73:AC:D8:85:81:BF:5F:BB

Certificate is to be certified until Jun 12 17:54:00 2023 GMT (365 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
---------------+++++++++++++++++++++++++++++++++----------------------------------+++++++++++++++++++++++++++-----
Mediante il seguente comando è possibile verificare la validità di un certificato rispetto alla CA che lo ha emesso

openssl verify -CAfile cacert.pem utente1-cert.pem

Esso restituisce OK semplicemente.
 L’utente può esportare il proprio certificato in formato PKCS#12
 
Questo formato permette di combinare in un unico file
-Il certificato dell’utente
-La sua chiave privata
-Il certificato della CA (Issuer)
 
openssl pkcs12 -export -in utente1-cert.pem -inkey private/utente1-key.pem -certfile cacert.pem -name "Certificato Utente1" -out utente1-cert.p12
------------------------------------------------------------------------------------------------------------------
Ovviamente c'è anche la revoca dei certificati,La CA possiede una copia di tutti i certificati che ha emesso e quindi può revocare piu facilmente attraverso il seguente comando:

openssl ca -revoke 01.pem -config ./openssl.cnf

Su un certificato revocato non avviene alcuna modifica. L’unico cambiamento è nel database della CA L’entry corrispondente al certificato revocato inizia con la lettera R, mentre quella corrispondente ad un certificato valido inizia con la lettera V,Una volta che un certificato è stato rilasciato non può essere più modificato!

Mediante il seguente comando è possibile generare la CRL, la lista dei certificati revocati

openssl ca -gencrl -out exampleca.crl -config ./openssl.cnf

Se il comando è eseguito senza errori, non viene mostrato alcun output, altrimenti, viene mostrato un messaggio d’errore,mentre mediante il seguente comando è possibile visualizzare il contenuto della CRL

openssl crl -in exampleca.crl -text

 
 